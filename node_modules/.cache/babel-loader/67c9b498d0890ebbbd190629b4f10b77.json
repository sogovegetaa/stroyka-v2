{"ast":null,"code":"import { toast } from 'react-toastify';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from './cartActionTypes';\nexport function cartAddItemSuccess(product, options = [], quantity = 1) {\n  toast.success(\"Product \\\"\".concat(product.name, \"\\\" added to cart!\"));\n  return {\n    type: CART_ADD_ITEM,\n    product,\n    options,\n    quantity\n  };\n}\nexport function cartRemoveItemSuccess(itemId) {\n  return {\n    type: CART_REMOVE_ITEM,\n    itemId\n  };\n}\nexport function cartUpdateQuantitiesSuccess(quantities) {\n  return {\n    type: CART_UPDATE_QUANTITIES,\n    quantities\n  };\n}\nexport function cartAddItem(product, options = [], quantity = 1) {\n  // sending request to server, timeout is used as a stub\n  return dispatch => new Promise(resolve => {\n    setTimeout(() => {\n      dispatch(cartAddItemSuccess(product, options, quantity));\n      resolve();\n    }, 2000);\n  });\n}\nexport function cartRemoveItem(itemId) {\n  // sending request to server, timeout is used as a stub\n  return dispatch => new Promise(resolve => {\n    setTimeout(() => {\n      dispatch(cartRemoveItemSuccess(itemId));\n      resolve();\n    }, 2000);\n  });\n}\nexport function cartUpdateQuantities(quantities) {\n  // sending request to server, timeout is used as a stub\n  return dispatch => new Promise(resolve => {\n    setTimeout(() => {\n      dispatch(cartUpdateQuantitiesSuccess(quantities));\n      resolve();\n    }, 2000);\n  });\n}","map":{"version":3,"sources":["C:\\Mustax\\qwe\\stroyka-tools-store-react-ecommerce-template-23909258-master\\src\\store\\cart\\cartActions.js"],"names":["toast","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_UPDATE_QUANTITIES","cartAddItemSuccess","product","options","quantity","success","name","type","cartRemoveItemSuccess","itemId","cartUpdateQuantitiesSuccess","quantities","cartAddItem","dispatch","Promise","resolve","setTimeout","cartRemoveItem","cartUpdateQuantities"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,sBAA1C,QAAwE,mBAAxE;AAGA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,OAAO,GAAG,EAA/C,EAAmDC,QAAQ,GAAG,CAA9D,EAAiE;AACpEP,EAAAA,KAAK,CAACQ,OAAN,qBAA0BH,OAAO,CAACI,IAAlC;AAEA,SAAO;AACHC,IAAAA,IAAI,EAAET,aADH;AAEHI,IAAAA,OAFG;AAGHC,IAAAA,OAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH;AAED,OAAO,SAASI,qBAAT,CAA+BC,MAA/B,EAAuC;AAC1C,SAAO;AACHF,IAAAA,IAAI,EAAER,gBADH;AAEHU,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,2BAAT,CAAqCC,UAArC,EAAiD;AACpD,SAAO;AACHJ,IAAAA,IAAI,EAAEP,sBADH;AAEHW,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,WAAT,CAAqBV,OAArB,EAA8BC,OAAO,GAAG,EAAxC,EAA4CC,QAAQ,GAAG,CAAvD,EAA0D;AAC7D;AACA,SAAOS,QAAQ,IACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACZ,kBAAkB,CAACC,OAAD,EAAUC,OAAV,EAAmBC,QAAnB,CAAnB,CAAR;AACAW,MAAAA,OAAO;AACV,KAHS,EAGP,IAHO,CAAV;AAIH,GALD,CADJ;AAQH;AAED,OAAO,SAASE,cAAT,CAAwBR,MAAxB,EAAgC;AACnC;AACA,SAAOI,QAAQ,IACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACL,qBAAqB,CAACC,MAAD,CAAtB,CAAR;AACAM,MAAAA,OAAO;AACV,KAHS,EAGP,IAHO,CAAV;AAIH,GALD,CADJ;AAQH;AAED,OAAO,SAASG,oBAAT,CAA8BP,UAA9B,EAA0C;AAC7C;AACA,SAAOE,QAAQ,IACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrBC,IAAAA,UAAU,CAAC,MAAM;AACbH,MAAAA,QAAQ,CAACH,2BAA2B,CAACC,UAAD,CAA5B,CAAR;AACAI,MAAAA,OAAO;AACV,KAHS,EAGP,IAHO,CAAV;AAIH,GALD,CADJ;AAQH","sourcesContent":["import { toast } from 'react-toastify';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from './cartActionTypes';\n\n\nexport function cartAddItemSuccess(product, options = [], quantity = 1) {\n    toast.success(`Product \"${product.name}\" added to cart!`);\n\n    return {\n        type: CART_ADD_ITEM,\n        product,\n        options,\n        quantity,\n    };\n}\n\nexport function cartRemoveItemSuccess(itemId) {\n    return {\n        type: CART_REMOVE_ITEM,\n        itemId,\n    };\n}\n\nexport function cartUpdateQuantitiesSuccess(quantities) {\n    return {\n        type: CART_UPDATE_QUANTITIES,\n        quantities,\n    };\n}\n\nexport function cartAddItem(product, options = [], quantity = 1) {\n    // sending request to server, timeout is used as a stub\n    return dispatch => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartAddItemSuccess(product, options, quantity));\n                resolve();\n            }, 2000);\n        })\n    );\n}\n\nexport function cartRemoveItem(itemId) {\n    // sending request to server, timeout is used as a stub\n    return dispatch => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartRemoveItemSuccess(itemId));\n                resolve();\n            }, 2000);\n        })\n    );\n}\n\nexport function cartUpdateQuantities(quantities) {\n    // sending request to server, timeout is used as a stub\n    return dispatch => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartUpdateQuantitiesSuccess(quantities));\n                resolve();\n            }, 2000);\n        })\n    );\n}\n"]},"metadata":{},"sourceType":"module"}