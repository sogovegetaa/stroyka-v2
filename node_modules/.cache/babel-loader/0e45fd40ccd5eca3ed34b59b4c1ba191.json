{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { parse, isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToString, formatToParts, formatXMLMessage } from './formatters'; // -- MessageFormat --------------------------------------------------------\n\nfunction resolveLocale(locales) {\n  if (typeof locales === 'string') {\n    locales = [locales];\n  }\n\n  try {\n    return Intl.NumberFormat.supportedLocalesOf(locales, {\n      // IE11 localeMatcher `lookup` seems to convert `en` -> `en-US`\n      // but not other browsers,\n      localeMatcher: 'best fit'\n    })[0];\n  } catch (e) {\n    return IntlMessageFormat.defaultLocale;\n  }\n} // TODO(skeleton): add skeleton support\n\n\nfunction prewarmFormatters(els, locales, formatters, formats) {\n  els.filter(function (el) {\n    return !isArgumentElement(el) && !isLiteralElement(el);\n  }).forEach(function (el) {\n    // Recursively format plural and select parts' option â€” which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n    if (isDateElement(el)) {\n      var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;\n      formatters.getDateTimeFormat(locales, style);\n    }\n\n    if (isTimeElement(el)) {\n      var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;\n      formatters.getDateTimeFormat(locales, style);\n    }\n\n    if (isNumberElement(el)) {\n      var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;\n      formatters.getNumberFormat(locales, style);\n    }\n\n    if (isSelectElement(el)) {\n      Object.keys(el.options).forEach(function (id) {\n        return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n      });\n    }\n\n    if (isPluralElement(el)) {\n      formatters.getPluralRules(locales, {\n        type: el.pluralType\n      });\n      Object.keys(el.options).forEach(function (id) {\n        return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n      });\n    }\n  });\n}\n\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n\n  return __assign({}, c1 || {}, c2 || {}, Object.keys(c1).reduce(function (all, k) {\n    all[k] = __assign({}, c1[k], c2[k] || {});\n    return all;\n  }, {}));\n}\n\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, __assign({}, defaultConfig));\n}\n\nexport function createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n\n  return {\n    getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n    getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n    getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules)\n  };\n}\n\nvar IntlMessageFormat =\n/** @class */\nfunction () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    var _this = this;\n\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n\n    this.format = function (values) {\n      return formatToString(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n    };\n\n    this.formatToParts = function (values) {\n      return formatToParts(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n    };\n\n    this.formatXMLMessage = function (values) {\n      return formatXMLMessage(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n    };\n\n    this.resolvedOptions = function () {\n      return {\n        locale: _this.locale\n      };\n    };\n\n    this.getAst = function () {\n      return _this.ast;\n    };\n\n    if (typeof message === 'string') {\n      this.message = message;\n\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      } // Parse string messages into an AST.\n\n\n      this.ast = IntlMessageFormat.__parse(message);\n    } else {\n      this.ast = message;\n    }\n\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    } // Creates a new object with the specified `formats` merged with the default\n    // formats.\n\n\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats); // Defined first because it's used to build the format pattern.\n\n    this.locale = resolveLocale(locales || []);\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n    prewarmFormatters(this.ast, this.locale, this.formatters, this.formats);\n  }\n\n  IntlMessageFormat.defaultLocale = 'en';\n  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n\n  IntlMessageFormat.formats = {\n    number: {\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;","map":null,"metadata":{},"sourceType":"module"}