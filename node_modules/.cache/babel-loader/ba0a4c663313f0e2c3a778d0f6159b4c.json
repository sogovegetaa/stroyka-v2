{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement } from 'intl-messageformat-parser';\nvar ESCAPE_HASH_REGEX = /\\\\#/g;\n\nvar FormatError =\n/** @class */\nfunction (_super) {\n  __extends(FormatError, _super);\n\n  function FormatError(msg, variableId) {\n    var _this = _super.call(this, msg) || this;\n\n    _this.variableId = variableId;\n    return _this;\n  }\n\n  return FormatError;\n}(Error);\n\nfunction mergeLiteral(parts) {\n  if (parts.length < 2) {\n    return parts;\n  }\n\n  return parts.reduce(function (all, part) {\n    var lastPart = all[all.length - 1];\n\n    if (!lastPart || lastPart.type !== 0\n    /* literal */\n    || part.type !== 0\n    /* literal */\n    ) {\n        all.push(part);\n      } else {\n      lastPart.value += part.value;\n    }\n\n    return all;\n  }, []);\n} // TODO(skeleton): add skeleton support\n\n\nexport function formatToParts(els, locales, formatters, formats, values, // For debugging\noriginalMessage) {\n  // Hot path for straight simple msg translations\n  if (els.length === 1 && isLiteralElement(els[0])) {\n    return [{\n      type: 0\n      /* literal */\n      ,\n      value: els[0].value.replace(ESCAPE_HASH_REGEX, '#')\n    }];\n  }\n\n  var result = [];\n\n  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n    var el = els_1[_i]; // Exit early for string parts.\n\n    if (isLiteralElement(el)) {\n      result.push({\n        type: 0\n        /* literal */\n        ,\n        value: el.value.replace(ESCAPE_HASH_REGEX, '#')\n      });\n      continue;\n    }\n\n    var varName = el.value; // Enforce that all required values are provided by the caller.\n\n    if (!(values && varName in values)) {\n      throw new FormatError(\"The intl string context variable \\\"\" + varName + \"\\\" was not provided to the string \\\"\" + originalMessage + \"\\\"\");\n    }\n\n    var value = values[varName];\n\n    if (isArgumentElement(el)) {\n      if (!value || typeof value === 'string' || typeof value === 'number') {\n        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';\n      }\n\n      result.push({\n        type: 1\n        /* argument */\n        ,\n        value: value\n      });\n      continue;\n    } // Recursively format plural and select parts' option â€” which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n\n\n    if (isDateElement(el)) {\n      var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;\n      result.push({\n        type: 0\n        /* literal */\n        ,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n\n    if (isTimeElement(el)) {\n      var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;\n      result.push({\n        type: 0\n        /* literal */\n        ,\n        value: formatters.getDateTimeFormat(locales, style).format(value)\n      });\n      continue;\n    }\n\n    if (isNumberElement(el)) {\n      var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;\n      result.push({\n        type: 0\n        /* literal */\n        ,\n        value: formatters.getNumberFormat(locales, style).format(value)\n      });\n      continue;\n    }\n\n    if (isSelectElement(el)) {\n      var opt = el.options[value] || el.options.other;\n\n      if (!opt) {\n        throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n      }\n\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n      continue;\n    }\n\n    if (isPluralElement(el)) {\n      var opt = el.options[\"=\" + value];\n\n      if (!opt) {\n        var rule = formatters.getPluralRules(locales, {\n          type: el.pluralType\n        }).select(value - (el.offset || 0));\n        opt = el.options[rule] || el.options.other;\n      }\n\n      if (!opt) {\n        throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n      }\n\n      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n      continue;\n    }\n  }\n\n  return mergeLiteral(result);\n}\nexport function formatToString(els, locales, formatters, formats, values, // For debugging\noriginalMessage) {\n  var parts = formatToParts(els, locales, formatters, formats, values, originalMessage); // Hot path for straight simple msg translations\n\n  if (parts.length === 1) {\n    return parts[0].value;\n  }\n\n  return parts.reduce(function (all, part) {\n    return all += part.value;\n  }, '');\n} // Singleton\n\nvar domParser;\nvar TOKEN_DELIMITER = '@@';\nvar TOKEN_REGEX = /@@(.*?)@@/g;\nvar counter = 0;\n\nfunction generateId() {\n  return Date.now() + \"_\" + ++counter;\n}\n\nfunction restoreRichPlaceholderMessage(text, objectParts) {\n  return text.split(TOKEN_REGEX).filter(Boolean).map(function (c) {\n    return objectParts[c] != null ? objectParts[c] : c;\n  }).reduce(function (all, c) {\n    if (!all.length) {\n      all.push(c);\n    } else if (typeof c === 'string' && typeof all[all.length - 1] === 'string') {\n      all[all.length - 1] += c;\n    } else {\n      all.push(c);\n    }\n\n    return all;\n  }, []);\n}\n\nexport function formatXMLMessage(els, locales, formatters, formats, values, // For debugging\noriginalMessage) {\n  var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);\n  var objectParts = {};\n  var formattedMessage = parts.reduce(function (all, part) {\n    if (part.type === 0\n    /* literal */\n    ) {\n        return all += part.value;\n      }\n\n    var id = generateId();\n    objectParts[id] = part.value;\n    return all += \"\" + TOKEN_DELIMITER + id + TOKEN_DELIMITER;\n  }, ''); // Not designed to filter out aggressively\n\n  if (!~formattedMessage.indexOf('<')) {\n    return restoreRichPlaceholderMessage(formattedMessage, objectParts);\n  }\n\n  if (!values) {\n    throw new FormatError('Message has placeholders but no values was given');\n  }\n\n  if (typeof DOMParser === 'undefined') {\n    throw new FormatError('Cannot format XML message without DOMParser');\n  }\n\n  if (!domParser) {\n    domParser = new DOMParser();\n  } // XML, not HTML since HTMl is strict about self-closing tag\n\n\n  var dom = domParser.parseFromString(\"<template>\" + formattedMessage + \"</template>\", 'application/xml');\n\n  if (dom.getElementsByTagName('parsererror').length) {\n    throw new FormatError(\"Malformed XML message \" + dom.getElementsByTagName('parsererror')[0].innerHTML);\n  }\n\n  var content = dom.firstChild;\n\n  if (!content) {\n    throw new FormatError(\"Malformed XML message \" + formattedMessage);\n  }\n\n  var tagsToFormat = Object.keys(values).filter(function (varName) {\n    return !!dom.getElementsByTagName(varName).length;\n  }); // No tags to format\n\n  if (!tagsToFormat.length) {\n    return restoreRichPlaceholderMessage(formattedMessage, objectParts);\n  }\n\n  var childNodes = Array.prototype.slice.call(content.childNodes);\n  return childNodes.reduce(function (reconstructedChunks, _a) {\n    var tagName = _a.tagName,\n        outerHTML = _a.outerHTML,\n        textContent = _a.textContent; // Regular text\n\n    if (!tagName) {\n      var chunks = restoreRichPlaceholderMessage(textContent || '', objectParts);\n      return reconstructedChunks.concat(chunks);\n    } // Legacy HTML\n\n\n    if (!values[tagName]) {\n      var chunks = restoreRichPlaceholderMessage(outerHTML, objectParts);\n\n      if (chunks.length === 1) {\n        return reconstructedChunks.concat([chunks[0]]);\n      }\n\n      return reconstructedChunks.concat(chunks);\n    } // XML Tag replacement\n\n\n    var formatFnOrValue = values[tagName];\n\n    if (typeof formatFnOrValue === 'function') {\n      if (textContent == null) {\n        return reconstructedChunks.concat([formatFnOrValue(textContent || undefined)]);\n      }\n\n      var chunks = restoreRichPlaceholderMessage(textContent, objectParts);\n      return reconstructedChunks.concat([formatFnOrValue.apply(void 0, chunks)]);\n    }\n\n    return reconstructedChunks.concat([formatFnOrValue]);\n  }, []);\n}","map":null,"metadata":{},"sourceType":"module"}