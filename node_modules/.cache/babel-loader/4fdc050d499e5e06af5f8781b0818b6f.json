{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nimport * as invariant_ from 'invariant';\nconst invariant = invariant_.default || invariant_;\nimport { createError, escape, filterProps } from './utils';\nimport { TYPE } from 'intl-messageformat-parser';\nconst DATE_TIME_FORMAT_OPTIONS = ['localeMatcher', 'formatMatcher', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'];\nconst NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits'];\nconst RELATIVE_FORMAT_OPTIONS = ['numeric', 'style'];\nconst PLURAL_FORMAT_OPTIONS = ['localeMatcher', 'type'];\n\nfunction getNamedFormat(formats, type, name, onError) {\n  const formatType = formats && formats[type];\n  let format;\n\n  if (formatType) {\n    format = formatType[name];\n  }\n\n  if (format) {\n    return format;\n  }\n\n  onError(createError(\"No \".concat(type, \" format named: \").concat(name)));\n}\n/**\n * Escape a raw msg when we run in prod mode\n * https://github.com/formatjs/formatjs/blob/master/packages/intl-messageformat-parser/src/parser.pegjs#L155\n */\n\n\nfunction escapeUnformattedMessage(msg) {\n  return msg.replace(/'\\{(.*?)\\}'/g, \"{$1}\");\n}\n\nexport function formatDate({\n  locale,\n  formats,\n  onError,\n  timeZone\n}, state, ...[value, options = {}]) {\n  const format = options.format;\n  let defaults = Object.assign({}, timeZone && {\n    timeZone\n  }, format && getNamedFormat(formats, 'date', format, onError));\n  let filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n  const date = typeof value === 'string' ? new Date(value || 0) : value;\n\n  try {\n    return state.getDateTimeFormat(locale, filteredOptions).format(date);\n  } catch (e) {\n    onError(createError('Error formatting date.', e));\n  }\n\n  return String(date);\n}\nexport function formatTime({\n  locale,\n  formats,\n  onError,\n  timeZone\n}, state, ...[value, options = {}]) {\n  const format = options.format;\n  let defaults = Object.assign({}, timeZone && {\n    timeZone\n  }, format && getNamedFormat(formats, 'time', format, onError));\n  let filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n\n  if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {\n    // Add default formatting options if hour, minute, or second isn't defined.\n    filteredOptions = Object.assign({}, filteredOptions, {\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n  }\n\n  const date = typeof value === 'string' ? new Date(value || 0) : value;\n\n  try {\n    return state.getDateTimeFormat(locale, filteredOptions).format(date);\n  } catch (e) {\n    onError(createError('Error formatting time.', e));\n  }\n\n  return String(date);\n}\nexport function formatRelativeTime({\n  locale,\n  formats,\n  onError\n}, state, ...[value, unit = 'second', options = {}]) {\n  const format = options.format;\n  let defaults = !!format && getNamedFormat(formats, 'relative', format, onError) || {};\n  let filteredOptions = filterProps(options, RELATIVE_FORMAT_OPTIONS, defaults);\n\n  try {\n    return state.getRelativeTimeFormat(locale, filteredOptions).format(value, unit);\n  } catch (e) {\n    onError(createError('Error formatting relative time.', e));\n  }\n\n  return String(value);\n}\nexport function formatNumber({\n  locale,\n  formats,\n  onError\n}, state, ...[value, options = {}]) {\n  const format = options.format;\n  let defaults = format && getNamedFormat(formats, 'number', format, onError) || {};\n  let filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n\n  try {\n    return state.getNumberFormat(locale, filteredOptions).format(value);\n  } catch (e) {\n    onError(createError('Error formatting number.', e));\n  }\n\n  return String(value);\n}\nexport function formatPlural({\n  locale,\n  onError\n}, state, ...[value, options = {}]) {\n  let filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);\n\n  try {\n    return state.getPluralRules(locale, filteredOptions).select(value);\n  } catch (e) {\n    onError(createError('Error formatting plural.', e));\n  }\n\n  return 'other';\n}\nexport function formatMessage({\n  locale,\n  formats,\n  messages,\n  defaultLocale,\n  defaultFormats,\n  onError\n}, state, messageDescriptor = {\n  id: ''\n}, values = {}) {\n  const id = messageDescriptor.id,\n        defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(id, '[React Intl] An `id` must be provided to format a message.');\n  const message = messages && messages[id];\n  const hasValues = Object.keys(values).length > 0; // Avoid expensive message formatting for simple messages without values. In\n  // development messages will always be formatted in case of missing values.\n\n  if (!hasValues && process.env.NODE_ENV === 'production') {\n    const val = message || defaultMessage || id;\n\n    if (typeof val === 'string') {\n      return escapeUnformattedMessage(val);\n    }\n\n    invariant(val.length === 1 && val[0].type === TYPE.literal, 'Message has placeholders but no values was provided');\n    return val[0].value;\n  }\n\n  let formattedMessageParts = [];\n\n  if (message) {\n    try {\n      let formatter = state.getMessageFormat(message, locale, formats, {\n        formatters: state\n      });\n      formattedMessageParts = formatter.formatXMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : ''), e));\n    }\n  } else {\n    // This prevents warnings from littering the console in development\n    // when no `messages` are passed into the <IntlProvider> for the\n    // default locale, and a default message is in the source.\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      onError(createError(\"Missing message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : '')));\n    }\n  }\n\n  if (!formattedMessageParts.length && defaultMessage) {\n    try {\n      let formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      formattedMessageParts = formatter.formatXMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\"\"), e));\n    }\n  }\n\n  if (!formattedMessageParts.length) {\n    onError(createError(\"Cannot format message: \\\"\".concat(id, \"\\\", \") + \"using message \".concat(message || defaultMessage ? 'source' : 'id', \" as fallback.\")));\n\n    if (typeof message === 'string') {\n      return message || defaultMessage || id;\n    }\n\n    return defaultMessage || id;\n  }\n\n  if (formattedMessageParts.length === 1 && typeof formattedMessageParts[0] === 'string') {\n    return formattedMessageParts[0] || defaultMessage || id;\n  }\n\n  return formattedMessageParts;\n}\nexport function formatHTMLMessage(config, state, messageDescriptor = {\n  id: ''\n}, rawValues = {}) {\n  // Process all the values before they are used when formatting the ICU\n  // Message string. Since the formatted message might be injected via\n  // `innerHTML`, all String-based values need to be HTML-escaped.\n  let escapedValues = Object.keys(rawValues).reduce((escaped, name) => {\n    let value = rawValues[name];\n    escaped[name] = typeof value === 'string' ? escape(value) : value;\n    return escaped;\n  }, {});\n  return formatMessage(config, state, messageDescriptor, escapedValues);\n}\nexport const formatters = {\n  formatNumber,\n  formatDate,\n  formatTime,\n  formatMessage,\n  formatPlural,\n  formatHTMLMessage,\n  formatRelativeTime\n};","map":null,"metadata":{},"sourceType":"module"}