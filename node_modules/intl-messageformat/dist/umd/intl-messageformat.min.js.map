{"version":3,"file":"intl-messageformat.min.js","sources":["../../../intl-messageformat-parser/lib/types.js","../../../intl-messageformat-parser/lib/parser.js","../../../intl-messageformat-parser/lib/normalize.js","../../../intl-messageformat-parser/lib/index.js","../../../intl-format-cache/lib/index.js","../../lib/formatters.js","../../lib/core.js"],"sourcesContent":["export var TYPE;\n(function (TYPE) {\n    /**\n     * Raw text\n     */\n    TYPE[TYPE[\"literal\"] = 0] = \"literal\";\n    /**\n     * Variable w/o any format, e.g `var` in `this is a {var}`\n     */\n    TYPE[TYPE[\"argument\"] = 1] = \"argument\";\n    /**\n     * Variable w/ number format\n     */\n    TYPE[TYPE[\"number\"] = 2] = \"number\";\n    /**\n     * Variable w/ date format\n     */\n    TYPE[TYPE[\"date\"] = 3] = \"date\";\n    /**\n     * Variable w/ time format\n     */\n    TYPE[TYPE[\"time\"] = 4] = \"time\";\n    /**\n     * Variable w/ select format\n     */\n    TYPE[TYPE[\"select\"] = 5] = \"select\";\n    /**\n     * Variable w/ plural format\n     */\n    TYPE[TYPE[\"plural\"] = 6] = \"plural\";\n})(TYPE || (TYPE = {}));\n/**\n * Type Guards\n */\nexport function isLiteralElement(el) {\n    return el.type === TYPE.literal;\n}\nexport function isArgumentElement(el) {\n    return el.type === TYPE.argument;\n}\nexport function isNumberElement(el) {\n    return el.type === TYPE.number;\n}\nexport function isDateElement(el) {\n    return el.type === TYPE.date;\n}\nexport function isTimeElement(el) {\n    return el.type === TYPE.time;\n}\nexport function isSelectElement(el) {\n    return el.type === TYPE.select;\n}\nexport function isPluralElement(el) {\n    return el.type === TYPE.plural;\n}\nexport function isNumberSkeleton(el) {\n    return el.type === 0 /* number */;\n}\nexport function isDateTimeSkeleton(el) {\n    return el.type === 1 /* dateTime */;\n}\nexport function createLiteralElement(value) {\n    return {\n        type: TYPE.literal,\n        value: value,\n    };\n}\nexport function createNumberElement(value, style) {\n    return {\n        type: TYPE.number,\n        value: value,\n        style: style,\n    };\n}\n","// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.5 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\nimport { TYPE, } from './types';\nvar SyntaxError = /** @class */ (function (_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError(message, expected, found, location) {\n        var _this = _super.call(this) || this;\n        _this.message = message;\n        _this.expected = expected;\n        _this.found = found;\n        _this.location = location;\n        _this.name = \"SyntaxError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(_this, SyntaxError);\n        }\n        return _this;\n    }\n    SyntaxError.buildMessage = function (expected, found) {\n        function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n        }\n        function literalEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\"/g, \"\\\\\\\"\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function classEscape(s) {\n            return s\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\]/g, \"\\\\]\")\n                .replace(/\\^/g, \"\\\\^\")\n                .replace(/-/g, \"\\\\-\")\n                .replace(/\\0/g, \"\\\\0\")\n                .replace(/\\t/g, \"\\\\t\")\n                .replace(/\\n/g, \"\\\\n\")\n                .replace(/\\r/g, \"\\\\r\")\n                .replace(/[\\x00-\\x0F]/g, function (ch) { return \"\\\\x0\" + hex(ch); })\n                .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) { return \"\\\\x\" + hex(ch); });\n        }\n        function describeExpectation(expectation) {\n            switch (expectation.type) {\n                case \"literal\":\n                    return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n                case \"class\":\n                    var escapedParts = expectation.parts.map(function (part) {\n                        return Array.isArray(part)\n                            ? classEscape(part[0]) + \"-\" + classEscape(part[1])\n                            : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                case \"any\":\n                    return \"any character\";\n                case \"end\":\n                    return \"end of input\";\n                case \"other\":\n                    return expectation.description;\n            }\n        }\n        function describeExpected(expected1) {\n            var descriptions = expected1.map(describeExpectation);\n            var i;\n            var j;\n            descriptions.sort();\n            if (descriptions.length > 0) {\n                for (i = 1, j = 1; i < descriptions.length; i++) {\n                    if (descriptions[i - 1] !== descriptions[i]) {\n                        descriptions[j] = descriptions[i];\n                        j++;\n                    }\n                }\n                descriptions.length = j;\n            }\n            switch (descriptions.length) {\n                case 1:\n                    return descriptions[0];\n                case 2:\n                    return descriptions[0] + \" or \" + descriptions[1];\n                default:\n                    return descriptions.slice(0, -1).join(\", \")\n                        + \", or \"\n                        + descriptions[descriptions.length - 1];\n            }\n        }\n        function describeFound(found1) {\n            return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n        }\n        return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n    };\n    return SyntaxError;\n}(Error));\nexport { SyntaxError };\nfunction peg$parse(input, options) {\n    options = options !== undefined ? options : {};\n    var peg$FAILED = {};\n    var peg$startRuleFunctions = { start: peg$parsestart };\n    var peg$startRuleFunction = peg$parsestart;\n    var peg$c0 = function (parts) {\n        return parts.join('');\n    };\n    var peg$c1 = function (messageText) {\n        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());\n    };\n    var peg$c2 = peg$otherExpectation(\"argumentElement\");\n    var peg$c3 = \"{\";\n    var peg$c4 = peg$literalExpectation(\"{\", false);\n    var peg$c5 = \"}\";\n    var peg$c6 = peg$literalExpectation(\"}\", false);\n    var peg$c7 = function (value) {\n        return __assign({ type: TYPE.argument, value: value }, insertLocation());\n    };\n    var peg$c8 = peg$otherExpectation(\"numberSkeletonId\");\n    var peg$c9 = /^['\\/{}]/;\n    var peg$c10 = peg$classExpectation([\"'\", \"/\", \"{\", \"}\"], false, false);\n    var peg$c11 = peg$anyExpectation();\n    var peg$c12 = peg$otherExpectation(\"numberSkeletonTokenOption\");\n    var peg$c13 = \"/\";\n    var peg$c14 = peg$literalExpectation(\"/\", false);\n    var peg$c15 = function (option) { return option; };\n    var peg$c16 = peg$otherExpectation(\"numberSkeletonToken\");\n    var peg$c17 = function (stem, options) {\n        return { stem: stem, options: options };\n    };\n    var peg$c18 = function (tokens) {\n        return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());\n    };\n    var peg$c19 = \"::\";\n    var peg$c20 = peg$literalExpectation(\"::\", false);\n    var peg$c21 = function (skeleton) { return skeleton; };\n    var peg$c22 = function (style) { return style.replace(/\\s*$/, ''); };\n    var peg$c23 = \",\";\n    var peg$c24 = peg$literalExpectation(\",\", false);\n    var peg$c25 = \"number\";\n    var peg$c26 = peg$literalExpectation(\"number\", false);\n    var peg$c27 = function (value, type, style) {\n        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());\n    };\n    var peg$c28 = \"'\";\n    var peg$c29 = peg$literalExpectation(\"'\", false);\n    var peg$c30 = /^[^']/;\n    var peg$c31 = peg$classExpectation([\"'\"], true, false);\n    var peg$c32 = /^[^a-zA-Z'{}]/;\n    var peg$c33 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"'\", \"{\", \"}\"], true, false);\n    var peg$c34 = /^[a-zA-Z]/;\n    var peg$c35 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false);\n    var peg$c36 = function (pattern) {\n        return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());\n    };\n    var peg$c37 = \"date\";\n    var peg$c38 = peg$literalExpectation(\"date\", false);\n    var peg$c39 = \"time\";\n    var peg$c40 = peg$literalExpectation(\"time\", false);\n    var peg$c41 = \"plural\";\n    var peg$c42 = peg$literalExpectation(\"plural\", false);\n    var peg$c43 = \"selectordinal\";\n    var peg$c44 = peg$literalExpectation(\"selectordinal\", false);\n    var peg$c45 = \"offset:\";\n    var peg$c46 = peg$literalExpectation(\"offset:\", false);\n    var peg$c47 = function (value, pluralType, offset, options) {\n        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, location = _a.location;\n                all[id] = {\n                    value: value,\n                    location: location\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c48 = \"select\";\n    var peg$c49 = peg$literalExpectation(\"select\", false);\n    var peg$c50 = function (value, options) {\n        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {\n                var id = _a.id, value = _a.value, location = _a.location;\n                all[id] = {\n                    value: value,\n                    location: location\n                };\n                return all;\n            }, {}) }, insertLocation());\n    };\n    var peg$c51 = \"=\";\n    var peg$c52 = peg$literalExpectation(\"=\", false);\n    var peg$c53 = function (id, value) {\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c54 = function (id, value) {\n        return __assign({ id: id,\n            value: value }, insertLocation());\n    };\n    var peg$c55 = peg$otherExpectation(\"whitespace pattern\");\n    var peg$c56 = /^[\\t-\\r \\x85\\u200E\\u200F\\u2028\\u2029]/;\n    var peg$c57 = peg$classExpectation([[\"\\t\", \"\\r\"], \" \", \"\\x85\", \"\\u200E\", \"\\u200F\", \"\\u2028\", \"\\u2029\"], false, false);\n    var peg$c58 = peg$otherExpectation(\"syntax pattern\");\n    var peg$c59 = /^[!-\\/:-@[-\\^`{-~\\xA1-\\xA7\\xA9\\xAB\\xAC\\xAE\\xB0\\xB1\\xB6\\xBB\\xBF\\xD7\\xF7\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E\\uFD3F\\uFE45\\uFE46]/;\n    var peg$c60 = peg$classExpectation([[\"!\", \"/\"], [\":\", \"@\"], [\"[\", \"^\"], \"`\", [\"{\", \"~\"], [\"\\xA1\", \"\\xA7\"], \"\\xA9\", \"\\xAB\", \"\\xAC\", \"\\xAE\", \"\\xB0\", \"\\xB1\", \"\\xB6\", \"\\xBB\", \"\\xBF\", \"\\xD7\", \"\\xF7\", [\"\\u2010\", \"\\u2027\"], [\"\\u2030\", \"\\u203E\"], [\"\\u2041\", \"\\u2053\"], [\"\\u2055\", \"\\u205E\"], [\"\\u2190\", \"\\u245F\"], [\"\\u2500\", \"\\u2775\"], [\"\\u2794\", \"\\u2BFF\"], [\"\\u2E00\", \"\\u2E7F\"], [\"\\u3001\", \"\\u3003\"], [\"\\u3008\", \"\\u3020\"], \"\\u3030\", \"\\uFD3E\", \"\\uFD3F\", \"\\uFE45\", \"\\uFE46\"], false, false);\n    var peg$c61 = peg$otherExpectation(\"optional whitespace\");\n    var peg$c62 = peg$otherExpectation(\"number\");\n    var peg$c63 = \"-\";\n    var peg$c64 = peg$literalExpectation(\"-\", false);\n    var peg$c65 = function (negative, num) {\n        return num\n            ? negative\n                ? -num\n                : num\n            : 0;\n    };\n    var peg$c66 = peg$otherExpectation(\"apostrophe\");\n    var peg$c67 = peg$otherExpectation(\"double apostrophes\");\n    var peg$c68 = \"''\";\n    var peg$c69 = peg$literalExpectation(\"''\", false);\n    var peg$c70 = function () { return \"'\"; };\n    var peg$c71 = /^[{}]/;\n    var peg$c72 = peg$classExpectation([\"{\", \"}\"], false, false);\n    var peg$c73 = function (escapedChar, quotedChars) {\n        return escapedChar + quotedChars.replace(\"''\", \"'\");\n    };\n    var peg$c74 = /^[^{}]/;\n    var peg$c75 = peg$classExpectation([\"{\", \"}\"], true, false);\n    var peg$c76 = peg$otherExpectation(\"argNameOrNumber\");\n    var peg$c77 = peg$otherExpectation(\"argNumber\");\n    var peg$c78 = \"0\";\n    var peg$c79 = peg$literalExpectation(\"0\", false);\n    var peg$c80 = function () { return 0; };\n    var peg$c81 = /^[1-9]/;\n    var peg$c82 = peg$classExpectation([[\"1\", \"9\"]], false, false);\n    var peg$c83 = /^[0-9]/;\n    var peg$c84 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n    var peg$c85 = function (digits) {\n        return parseInt(digits.join(''), 10);\n    };\n    var peg$c86 = peg$otherExpectation(\"argName\");\n    var peg$currPos = 0;\n    var peg$savedPos = 0;\n    var peg$posDetailsCache = [{ line: 1, column: 1 }];\n    var peg$maxFailPos = 0;\n    var peg$maxFailExpected = [];\n    var peg$silentFails = 0;\n    var peg$result;\n    if (options.startRule !== undefined) {\n        if (!(options.startRule in peg$startRuleFunctions)) {\n            throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n        }\n        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n    function text() {\n        return input.substring(peg$savedPos, peg$currPos);\n    }\n    function location() {\n        return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n    function expected(description, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);\n    }\n    function error(message, location1) {\n        location1 = location1 !== undefined\n            ? location1\n            : peg$computeLocation(peg$savedPos, peg$currPos);\n        throw peg$buildSimpleError(message, location1);\n    }\n    function peg$literalExpectation(text1, ignoreCase) {\n        return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n    }\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n        return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n    function peg$anyExpectation() {\n        return { type: \"any\" };\n    }\n    function peg$endExpectation() {\n        return { type: \"end\" };\n    }\n    function peg$otherExpectation(description) {\n        return { type: \"other\", description: description };\n    }\n    function peg$computePosDetails(pos) {\n        var details = peg$posDetailsCache[pos];\n        var p;\n        if (details) {\n            return details;\n        }\n        else {\n            p = pos - 1;\n            while (!peg$posDetailsCache[p]) {\n                p--;\n            }\n            details = peg$posDetailsCache[p];\n            details = {\n                line: details.line,\n                column: details.column\n            };\n            while (p < pos) {\n                if (input.charCodeAt(p) === 10) {\n                    details.line++;\n                    details.column = 1;\n                }\n                else {\n                    details.column++;\n                }\n                p++;\n            }\n            peg$posDetailsCache[pos] = details;\n            return details;\n        }\n    }\n    function peg$computeLocation(startPos, endPos) {\n        var startPosDetails = peg$computePosDetails(startPos);\n        var endPosDetails = peg$computePosDetails(endPos);\n        return {\n            start: {\n                offset: startPos,\n                line: startPosDetails.line,\n                column: startPosDetails.column\n            },\n            end: {\n                offset: endPos,\n                line: endPosDetails.line,\n                column: endPosDetails.column\n            }\n        };\n    }\n    function peg$fail(expected1) {\n        if (peg$currPos < peg$maxFailPos) {\n            return;\n        }\n        if (peg$currPos > peg$maxFailPos) {\n            peg$maxFailPos = peg$currPos;\n            peg$maxFailExpected = [];\n        }\n        peg$maxFailExpected.push(expected1);\n    }\n    function peg$buildSimpleError(message, location1) {\n        return new SyntaxError(message, [], \"\", location1);\n    }\n    function peg$buildStructuredError(expected1, found, location1) {\n        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);\n    }\n    function peg$parsestart() {\n        var s0;\n        s0 = peg$parsemessage();\n        return s0;\n    }\n    function peg$parsemessage() {\n        var s0, s1;\n        s0 = [];\n        s1 = peg$parsemessageElement();\n        while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            s1 = peg$parsemessageElement();\n        }\n        return s0;\n    }\n    function peg$parsemessageElement() {\n        var s0;\n        s0 = peg$parseliteralElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargumentElement();\n            if (s0 === peg$FAILED) {\n                s0 = peg$parsesimpleFormatElement();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parsepluralElement();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseselectElement();\n                    }\n                }\n            }\n        }\n        return s0;\n    }\n    function peg$parsemessageText() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsedoubleApostrophes();\n        if (s2 === peg$FAILED) {\n            s2 = peg$parsequotedString();\n            if (s2 === peg$FAILED) {\n                s2 = peg$parseunquotedString();\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsedoubleApostrophes();\n                if (s2 === peg$FAILED) {\n                    s2 = peg$parsequotedString();\n                    if (s2 === peg$FAILED) {\n                        s2 = peg$parseunquotedString();\n                    }\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseliteralElement() {\n        var s0, s1;\n        s0 = peg$currPos;\n        s1 = peg$parsemessageText();\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parseargumentElement() {\n        var s0, s1, s2, s3, s4, s5;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                            s5 = peg$c5;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c6);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c7(s3);\n                            s0 = s1;\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c2);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonId() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsepatternWhiteSpace();\n        if (s4 === peg$FAILED) {\n            if (peg$c9.test(input.charAt(peg$currPos))) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c10);\n                }\n            }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c11);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsepatternWhiteSpace();\n                if (s4 === peg$FAILED) {\n                    if (peg$c9.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c10);\n                        }\n                    }\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c11);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c8);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonTokenOption() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n            s1 = peg$c13;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c14);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c15(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c12);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeletonToken() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeletonId();\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                s4 = peg$parsenumberSkeletonTokenOption();\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    s4 = peg$parsenumberSkeletonTokenOption();\n                }\n                if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s2, s3);\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c16);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumberSkeleton() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsenumberSkeletonToken();\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$parsenumberSkeletonToken();\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsenumberArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n            s1 = peg$c19;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsenumberSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsemessageText();\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c22(s1);\n            }\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parsenumberFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c25) {\n                                    s7 = peg$c25;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c26);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsenumberArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c5;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c6);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c27(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonLiteral() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c28;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsedoubleApostrophes();\n            if (s3 === peg$FAILED) {\n                if (peg$c30.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c31);\n                    }\n                }\n            }\n            if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsedoubleApostrophes();\n                    if (s3 === peg$FAILED) {\n                        if (peg$c30.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c31);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                    s3 = peg$c28;\n                    peg$currPos++;\n                }\n                else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c29);\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s1 = [s1, s2, s3];\n                    s0 = s1;\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = [];\n            s1 = peg$parsedoubleApostrophes();\n            if (s1 === peg$FAILED) {\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c33);\n                    }\n                }\n            }\n            if (s1 !== peg$FAILED) {\n                while (s1 !== peg$FAILED) {\n                    s0.push(s1);\n                    s1 = peg$parsedoubleApostrophes();\n                    if (s1 === peg$FAILED) {\n                        if (peg$c32.test(input.charAt(peg$currPos))) {\n                            s1 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c33);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                s0 = peg$FAILED;\n            }\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeletonPattern() {\n        var s0, s1;\n        s0 = [];\n        if (peg$c34.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c35);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            while (s1 !== peg$FAILED) {\n                s0.push(s1);\n                if (peg$c34.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c35);\n                    }\n                }\n            }\n        }\n        else {\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsedateTimeSkeleton() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = [];\n        s3 = peg$parsedateTimeSkeletonLiteral();\n        if (s3 === peg$FAILED) {\n            s3 = peg$parsedateTimeSkeletonPattern();\n        }\n        if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsedateTimeSkeletonLiteral();\n                if (s3 === peg$FAILED) {\n                    s3 = peg$parsedateTimeSkeletonPattern();\n                }\n            }\n        }\n        else {\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            s1 = input.substring(s1, peg$currPos);\n        }\n        else {\n            s1 = s2;\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c36(s1);\n        }\n        s0 = s1;\n        return s0;\n    }\n    function peg$parsedateOrTimeArgStyle() {\n        var s0, s1, s2;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c19) {\n            s1 = peg$c19;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c20);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsedateTimeSkeleton();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsemessageText();\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c22(s1);\n            }\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parsedateOrTimeFormatElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 4) === peg$c37) {\n                                    s7 = peg$c37;\n                                    peg$currPos += 4;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c38);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c39) {\n                                        s7 = peg$c39;\n                                        peg$currPos += 4;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c40);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        s9 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s10 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s10 !== peg$FAILED) {\n                                            s11 = peg$parse_();\n                                            if (s11 !== peg$FAILED) {\n                                                s12 = peg$parsedateOrTimeArgStyle();\n                                                if (s12 !== peg$FAILED) {\n                                                    s10 = [s10, s11, s12];\n                                                    s9 = s10;\n                                                }\n                                                else {\n                                                    peg$currPos = s9;\n                                                    s9 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s9;\n                                                s9 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s9;\n                                            s9 = peg$FAILED;\n                                        }\n                                        if (s9 === peg$FAILED) {\n                                            s9 = null;\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s11 = peg$c5;\n                                                    peg$currPos++;\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c6);\n                                                    }\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c27(s3, s7, s9);\n                                                    s0 = s1;\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsesimpleFormatElement() {\n        var s0;\n        s0 = peg$parsenumberFormatElement();\n        if (s0 === peg$FAILED) {\n            s0 = peg$parsedateOrTimeFormatElement();\n        }\n        return s0;\n    }\n    function peg$parsepluralElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c41) {\n                                    s7 = peg$c41;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c42);\n                                    }\n                                }\n                                if (s7 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 13) === peg$c43) {\n                                        s7 = peg$c43;\n                                        peg$currPos += 13;\n                                    }\n                                    else {\n                                        s7 = peg$FAILED;\n                                        if (peg$silentFails === 0) {\n                                            peg$fail(peg$c44);\n                                        }\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = peg$currPos;\n                                                if (input.substr(peg$currPos, 7) === peg$c45) {\n                                                    s12 = peg$c45;\n                                                    peg$currPos += 7;\n                                                }\n                                                else {\n                                                    s12 = peg$FAILED;\n                                                    if (peg$silentFails === 0) {\n                                                        peg$fail(peg$c46);\n                                                    }\n                                                }\n                                                if (s12 !== peg$FAILED) {\n                                                    s13 = peg$parse_();\n                                                    if (s13 !== peg$FAILED) {\n                                                        s14 = peg$parsenumber();\n                                                        if (s14 !== peg$FAILED) {\n                                                            s12 = [s12, s13, s14];\n                                                            s11 = s12;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s11;\n                                                            s11 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s11;\n                                                        s11 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s11;\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 === peg$FAILED) {\n                                                    s11 = null;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        s13 = [];\n                                                        s14 = peg$parsepluralOption();\n                                                        if (s14 !== peg$FAILED) {\n                                                            while (s14 !== peg$FAILED) {\n                                                                s13.push(s14);\n                                                                s14 = peg$parsepluralOption();\n                                                            }\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            s14 = peg$parse_();\n                                                            if (s14 !== peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                                    s15 = peg$c5;\n                                                                    peg$currPos++;\n                                                                }\n                                                                else {\n                                                                    s15 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) {\n                                                                        peg$fail(peg$c6);\n                                                                    }\n                                                                }\n                                                                if (s15 !== peg$FAILED) {\n                                                                    peg$savedPos = s0;\n                                                                    s1 = peg$c47(s3, s7, s11, s13);\n                                                                    s0 = s1;\n                                                                }\n                                                                else {\n                                                                    peg$currPos = s0;\n                                                                    s0 = peg$FAILED;\n                                                                }\n                                                            }\n                                                            else {\n                                                                peg$currPos = s0;\n                                                                s0 = peg$FAILED;\n                                                            }\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseselectElement() {\n        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n            s1 = peg$c3;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parseargNameOrNumber();\n                if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                            s5 = peg$c23;\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c24);\n                            }\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s6 = peg$parse_();\n                            if (s6 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 6) === peg$c48) {\n                                    s7 = peg$c48;\n                                    peg$currPos += 6;\n                                }\n                                else {\n                                    s7 = peg$FAILED;\n                                    if (peg$silentFails === 0) {\n                                        peg$fail(peg$c49);\n                                    }\n                                }\n                                if (s7 !== peg$FAILED) {\n                                    s8 = peg$parse_();\n                                    if (s8 !== peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 44) {\n                                            s9 = peg$c23;\n                                            peg$currPos++;\n                                        }\n                                        else {\n                                            s9 = peg$FAILED;\n                                            if (peg$silentFails === 0) {\n                                                peg$fail(peg$c24);\n                                            }\n                                        }\n                                        if (s9 !== peg$FAILED) {\n                                            s10 = peg$parse_();\n                                            if (s10 !== peg$FAILED) {\n                                                s11 = [];\n                                                s12 = peg$parseselectOption();\n                                                if (s12 !== peg$FAILED) {\n                                                    while (s12 !== peg$FAILED) {\n                                                        s11.push(s12);\n                                                        s12 = peg$parseselectOption();\n                                                    }\n                                                }\n                                                else {\n                                                    s11 = peg$FAILED;\n                                                }\n                                                if (s11 !== peg$FAILED) {\n                                                    s12 = peg$parse_();\n                                                    if (s12 !== peg$FAILED) {\n                                                        if (input.charCodeAt(peg$currPos) === 125) {\n                                                            s13 = peg$c5;\n                                                            peg$currPos++;\n                                                        }\n                                                        else {\n                                                            s13 = peg$FAILED;\n                                                            if (peg$silentFails === 0) {\n                                                                peg$fail(peg$c6);\n                                                            }\n                                                        }\n                                                        if (s13 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c50(s3, s11);\n                                                            s0 = s1;\n                                                        }\n                                                        else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                        }\n                                                    }\n                                                    else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                    }\n                                                }\n                                                else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                }\n                                            }\n                                            else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                            }\n                                        }\n                                        else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                        }\n                                    }\n                                    else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                    }\n                                }\n                                else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                }\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralRuleSelectValue() {\n        var s0, s1, s2, s3;\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61) {\n            s2 = peg$c51;\n            peg$currPos++;\n        }\n        else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c52);\n            }\n        }\n        if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumber();\n            if (s3 !== peg$FAILED) {\n                s2 = [s2, s3];\n                s1 = s2;\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        if (s0 === peg$FAILED) {\n            s0 = peg$parseargName();\n        }\n        return s0;\n    }\n    function peg$parseselectOption() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargName();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c3;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c4);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemessage();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s6 = peg$c5;\n                                peg$currPos++;\n                            }\n                            else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c6);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c53(s2, s5);\n                                s0 = s1;\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepluralOption() {\n        var s0, s1, s2, s3, s4, s5, s6;\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parsepluralRuleSelectValue();\n            if (s2 !== peg$FAILED) {\n                s3 = peg$parse_();\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                        s4 = peg$c3;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c4);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parsemessage();\n                        if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                                s6 = peg$c5;\n                                peg$currPos++;\n                            }\n                            else {\n                                s6 = peg$FAILED;\n                                if (peg$silentFails === 0) {\n                                    peg$fail(peg$c6);\n                                }\n                            }\n                            if (s6 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c54(s2, s5);\n                                s0 = s1;\n                            }\n                            else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        }\n                        else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parsepatternWhiteSpace() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c56.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c57);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c55);\n            }\n        }\n        return s0;\n    }\n    function peg$parsepatternSyntax() {\n        var s0, s1;\n        peg$silentFails++;\n        if (peg$c59.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c60);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c58);\n            }\n        }\n        return s0;\n    }\n    function peg$parse_() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parsepatternWhiteSpace();\n        while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parsepatternWhiteSpace();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c61);\n            }\n        }\n        return s0;\n    }\n    function peg$parsenumber() {\n        var s0, s1, s2;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c63;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c64);\n            }\n        }\n        if (s1 === peg$FAILED) {\n            s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n            s2 = peg$parseargNumber();\n            if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c65(s1, s2);\n                s0 = s1;\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c62);\n            }\n        }\n        return s0;\n    }\n    function peg$parseapostrophe() {\n        var s0, s1;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s0 = peg$c28;\n            peg$currPos++;\n        }\n        else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c66);\n            }\n        }\n        return s0;\n    }\n    function peg$parsedoubleApostrophes() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c68) {\n            s1 = peg$c68;\n            peg$currPos += 2;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c69);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c70();\n        }\n        s0 = s1;\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c67);\n            }\n        }\n        return s0;\n    }\n    function peg$parsequotedString() {\n        var s0, s1, s2, s3, s4, s5;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n            s1 = peg$c28;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c29);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            if (peg$c71.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c72);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = [];\n                if (input.substr(peg$currPos, 2) === peg$c68) {\n                    s5 = peg$c68;\n                    peg$currPos += 2;\n                }\n                else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c69);\n                    }\n                }\n                if (s5 === peg$FAILED) {\n                    if (peg$c30.test(input.charAt(peg$currPos))) {\n                        s5 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c31);\n                        }\n                    }\n                }\n                while (s5 !== peg$FAILED) {\n                    s4.push(s5);\n                    if (input.substr(peg$currPos, 2) === peg$c68) {\n                        s5 = peg$c68;\n                        peg$currPos += 2;\n                    }\n                    else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c69);\n                        }\n                    }\n                    if (s5 === peg$FAILED) {\n                        if (peg$c30.test(input.charAt(peg$currPos))) {\n                            s5 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        }\n                        else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) {\n                                peg$fail(peg$c31);\n                            }\n                        }\n                    }\n                }\n                if (s4 !== peg$FAILED) {\n                    s3 = input.substring(s3, peg$currPos);\n                }\n                else {\n                    s3 = s4;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                        s4 = peg$c28;\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c29);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c73(s2, s3);\n                        s0 = s1;\n                    }\n                    else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n        }\n        return s0;\n    }\n    function peg$parseunquotedString() {\n        var s0, s1;\n        s0 = peg$currPos;\n        if (peg$c74.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c75);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        return s0;\n    }\n    function peg$parseargNameOrNumber() {\n        var s0, s1;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = peg$parseargNumber();\n        if (s1 === peg$FAILED) {\n            s1 = peg$parseargName();\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c76);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargNumber() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 48) {\n            s1 = peg$c78;\n            peg$currPos++;\n        }\n        else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c79);\n            }\n        }\n        if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c80();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$currPos;\n            if (peg$c81.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c82);\n                }\n            }\n            if (s2 !== peg$FAILED) {\n                s3 = [];\n                if (peg$c83.test(input.charAt(peg$currPos))) {\n                    s4 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                }\n                else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                        peg$fail(peg$c84);\n                    }\n                }\n                while (s4 !== peg$FAILED) {\n                    s3.push(s4);\n                    if (peg$c83.test(input.charAt(peg$currPos))) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c84);\n                        }\n                    }\n                }\n                if (s3 !== peg$FAILED) {\n                    s2 = [s2, s3];\n                    s1 = s2;\n                }\n                else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n            }\n            else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n            }\n            if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c85(s1);\n            }\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c77);\n            }\n        }\n        return s0;\n    }\n    function peg$parseargName() {\n        var s0, s1, s2, s3, s4;\n        peg$silentFails++;\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parsepatternWhiteSpace();\n        if (s4 === peg$FAILED) {\n            s4 = peg$parsepatternSyntax();\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n            s3 = undefined;\n        }\n        else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n                s4 = input.charAt(peg$currPos);\n                peg$currPos++;\n            }\n            else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                    peg$fail(peg$c11);\n                }\n            }\n            if (s4 !== peg$FAILED) {\n                s3 = [s3, s4];\n                s2 = s3;\n            }\n            else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n            }\n        }\n        else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                s2 = peg$currPos;\n                s3 = peg$currPos;\n                peg$silentFails++;\n                s4 = peg$parsepatternWhiteSpace();\n                if (s4 === peg$FAILED) {\n                    s4 = peg$parsepatternSyntax();\n                }\n                peg$silentFails--;\n                if (s4 === peg$FAILED) {\n                    s3 = undefined;\n                }\n                else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    if (input.length > peg$currPos) {\n                        s4 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                    }\n                    else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                            peg$fail(peg$c11);\n                        }\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s3 = [s3, s4];\n                        s2 = s3;\n                    }\n                    else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                    }\n                }\n                else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                }\n            }\n        }\n        else {\n            s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n            s0 = input.substring(s0, peg$currPos);\n        }\n        else {\n            s0 = s1;\n        }\n        peg$silentFails--;\n        if (s0 === peg$FAILED) {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n                peg$fail(peg$c86);\n            }\n        }\n        return s0;\n    }\n    function insertLocation() {\n        return options && options.captureLocation ? {\n            location: location()\n        } : {};\n    }\n    peg$result = peg$startRuleFunction();\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n        return peg$result;\n    }\n    else {\n        if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n            peg$fail(peg$endExpectation());\n        }\n        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length\n            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n}\nexport var parse = peg$parse;\n","import { isPluralElement, isLiteralElement, isSelectElement, } from './types';\nimport { parse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!isPluralElement(el) && !isSelectElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = parse(newValue);\n                (_a = opt.value).splice.apply(_a, [matchingLiteralElIndex, 1].concat(newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\n","import { parse as pegParse } from './parser';\nimport { normalizeHashtagInPlural } from './normalize';\nexport * from './types';\nexport * from './parser';\nexport function parse(input, opts) {\n    var els = pegParse(input, opts);\n    if (!opts || opts.normalizeHashtagInPlural !== false) {\n        normalizeHashtagInPlural(els);\n    }\n    return els;\n}\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n// -- Utilities ----------------------------------------------------------------\nfunction getCacheId(inputs) {\n    return JSON.stringify(inputs.map(function (input) {\n        return input && typeof input === 'object' ? orderedProps(input) : input;\n    }));\n}\nfunction orderedProps(obj) {\n    return Object.keys(obj)\n        .sort()\n        .map(function (k) {\n        var _a;\n        return (_a = {}, _a[k] = obj[k], _a);\n    });\n}\nvar memoizeFormatConstructor = function (FormatConstructor, cache) {\n    if (cache === void 0) { cache = {}; }\n    return function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var cacheId = getCacheId(args);\n        var format = cacheId && cache[cacheId];\n        if (!format) {\n            format = new ((_a = FormatConstructor).bind.apply(_a, [void 0].concat(args)))();\n            if (cacheId) {\n                cache[cacheId] = format;\n            }\n        }\n        return format;\n    };\n};\nexport default memoizeFormatConstructor;\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement, } from 'intl-messageformat-parser';\nvar ESCAPE_HASH_REGEX = /\\\\#/g;\nvar FormatError = /** @class */ (function (_super) {\n    __extends(FormatError, _super);\n    function FormatError(msg, variableId) {\n        var _this = _super.call(this, msg) || this;\n        _this.variableId = variableId;\n        return _this;\n    }\n    return FormatError;\n}(Error));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function (all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart ||\n            lastPart.type !== 0 /* literal */ ||\n            part.type !== 0 /* literal */) {\n            all.push(part);\n        }\n        else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\n// TODO(skeleton): add skeleton support\nexport function formatToParts(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && isLiteralElement(els[0])) {\n        return [\n            {\n                type: 0 /* literal */,\n                value: els[0].value.replace(ESCAPE_HASH_REGEX, '#'),\n            },\n        ];\n    }\n    var result = [];\n    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if (isLiteralElement(el)) {\n            result.push({\n                type: 0 /* literal */,\n                value: el.value.replace(ESCAPE_HASH_REGEX, '#'),\n            });\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new FormatError(\"The intl string context variable \\\"\" + varName + \"\\\" was not provided to the string \\\"\" + originalMessage + \"\\\"\");\n        }\n        var value = values[varName];\n        if (isArgumentElement(el)) {\n            if (!value || typeof value === 'string' || typeof value === 'number') {\n                value =\n                    typeof value === 'string' || typeof value === 'number'\n                        ? String(value)\n                        : '';\n            }\n            result.push({\n                type: 1 /* argument */,\n                value: value,\n            });\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isTimeElement(el)) {\n            var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getDateTimeFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isNumberElement(el)) {\n            var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;\n            result.push({\n                type: 0 /* literal */,\n                value: formatters\n                    .getNumberFormat(locales, style)\n                    .format(value),\n            });\n            continue;\n        }\n        if (isSelectElement(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if (isPluralElement(el)) {\n            var opt = el.options[\"=\" + value];\n            if (!opt) {\n                var rule = formatters\n                    .getPluralRules(locales, { type: el.pluralType })\n                    .select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new RangeError(\"Invalid values for \\\"\" + el.value + \"\\\": \\\"\" + value + \"\\\". Options are \\\"\" + Object.keys(el.options).join('\", \"') + \"\\\"\");\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\nexport function formatToString(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);\n    // Hot path for straight simple msg translations\n    if (parts.length === 1) {\n        return parts[0].value;\n    }\n    return parts.reduce(function (all, part) { return (all += part.value); }, '');\n}\n// Singleton\nvar domParser;\nvar TOKEN_DELIMITER = '@@';\nvar TOKEN_REGEX = /@@(.*?)@@/g;\nvar counter = 0;\nfunction generateId() {\n    return Date.now() + \"_\" + ++counter;\n}\nfunction restoreRichPlaceholderMessage(text, objectParts) {\n    return text\n        .split(TOKEN_REGEX)\n        .filter(Boolean)\n        .map(function (c) { return (objectParts[c] != null ? objectParts[c] : c); })\n        .reduce(function (all, c) {\n        if (!all.length) {\n            all.push(c);\n        }\n        else if (typeof c === 'string' &&\n            typeof all[all.length - 1] === 'string') {\n            all[all.length - 1] += c;\n        }\n        else {\n            all.push(c);\n        }\n        return all;\n    }, []);\n}\nexport function formatXMLMessage(els, locales, formatters, formats, values, \n// For debugging\noriginalMessage) {\n    var parts = formatToParts(els, locales, formatters, formats, values, originalMessage);\n    var objectParts = {};\n    var formattedMessage = parts.reduce(function (all, part) {\n        if (part.type === 0 /* literal */) {\n            return (all += part.value);\n        }\n        var id = generateId();\n        objectParts[id] = part.value;\n        return (all += \"\" + TOKEN_DELIMITER + id + TOKEN_DELIMITER);\n    }, '');\n    // Not designed to filter out aggressively\n    if (!~formattedMessage.indexOf('<')) {\n        return restoreRichPlaceholderMessage(formattedMessage, objectParts);\n    }\n    if (!values) {\n        throw new FormatError('Message has placeholders but no values was given');\n    }\n    if (typeof DOMParser === 'undefined') {\n        throw new FormatError('Cannot format XML message without DOMParser');\n    }\n    if (!domParser) {\n        domParser = new DOMParser();\n    }\n    // XML, not HTML since HTMl is strict about self-closing tag\n    var dom = domParser.parseFromString(\"<template>\" + formattedMessage + \"</template>\", 'application/xml');\n    if (dom.getElementsByTagName('parsererror').length) {\n        throw new FormatError(\"Malformed XML message \" + dom.getElementsByTagName('parsererror')[0].innerHTML);\n    }\n    var content = dom.firstChild;\n    if (!content) {\n        throw new FormatError(\"Malformed XML message \" + formattedMessage);\n    }\n    var tagsToFormat = Object.keys(values).filter(function (varName) { return !!dom.getElementsByTagName(varName).length; });\n    // No tags to format\n    if (!tagsToFormat.length) {\n        return restoreRichPlaceholderMessage(formattedMessage, objectParts);\n    }\n    var childNodes = Array.prototype.slice.call(content.childNodes);\n    return childNodes.reduce(function (reconstructedChunks, _a) {\n        var tagName = _a.tagName, outerHTML = _a.outerHTML, textContent = _a.textContent;\n        // Regular text\n        if (!tagName) {\n            var chunks = restoreRichPlaceholderMessage(textContent || '', objectParts);\n            return reconstructedChunks.concat(chunks);\n        }\n        // Legacy HTML\n        if (!values[tagName]) {\n            var chunks = restoreRichPlaceholderMessage(outerHTML, objectParts);\n            if (chunks.length === 1) {\n                return reconstructedChunks.concat([chunks[0]]);\n            }\n            return reconstructedChunks.concat(chunks);\n        }\n        // XML Tag replacement\n        var formatFnOrValue = values[tagName];\n        if (typeof formatFnOrValue === 'function') {\n            if (textContent == null) {\n                return reconstructedChunks.concat([\n                    formatFnOrValue(textContent || undefined),\n                ]);\n            }\n            var chunks = restoreRichPlaceholderMessage(textContent, objectParts);\n            return reconstructedChunks.concat([formatFnOrValue.apply(void 0, chunks)]);\n        }\n        return reconstructedChunks.concat([formatFnOrValue]);\n    }, []);\n}\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { parse, isArgumentElement, isLiteralElement, isDateElement, isTimeElement, isNumberElement, isSelectElement, isPluralElement, } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToString, formatToParts, formatXMLMessage, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction resolveLocale(locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n    try {\n        return Intl.NumberFormat.supportedLocalesOf(locales, {\n            // IE11 localeMatcher `lookup` seems to convert `en` -> `en-US`\n            // but not other browsers,\n            localeMatcher: 'best fit',\n        })[0];\n    }\n    catch (e) {\n        return IntlMessageFormat.defaultLocale;\n    }\n}\n// TODO(skeleton): add skeleton support\nfunction prewarmFormatters(els, locales, formatters, formats) {\n    els\n        .filter(function (el) { return !isArgumentElement(el) && !isLiteralElement(el); })\n        .forEach(function (el) {\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (isDateElement(el)) {\n            var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;\n            formatters.getDateTimeFormat(locales, style);\n        }\n        if (isTimeElement(el)) {\n            var style = typeof el.style === 'string' ? formats.time[el.style] : undefined;\n            formatters.getDateTimeFormat(locales, style);\n        }\n        if (isNumberElement(el)) {\n            var style = typeof el.style === 'string' ? formats.number[el.style] : undefined;\n            formatters.getNumberFormat(locales, style);\n        }\n        if (isSelectElement(el)) {\n            Object.keys(el.options).forEach(function (id) {\n                return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n            });\n        }\n        if (isPluralElement(el)) {\n            formatters.getPluralRules(locales, { type: el.pluralType });\n            Object.keys(el.options).forEach(function (id) {\n                return prewarmFormatters(el.options[id].value, locales, formatters, formats);\n            });\n        }\n    });\n}\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign({}, (c1 || {}), (c2 || {}), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign({}, c1[k], (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nexport function createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            return formatToString(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.formatXMLMessage = function (values) {\n            return formatXMLMessage(_this.ast, _this.locale, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.resolvedOptions = function () { return ({ locale: _this.locale }); };\n        this.getAst = function () { return _this.ast; };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message);\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locale = resolveLocale(locales || []);\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n        prewarmFormatters(this.ast, this.locale, this.formatters, this.formats);\n    }\n    IntlMessageFormat.defaultLocale = 'en';\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;\n"],"names":["TYPE","isLiteralElement","el","type","literal","isArgumentElement","argument","isNumberElement","number","isDateElement","date","isTimeElement","time","isSelectElement","select","isPluralElement","plural","extendStatics","_super","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","SyntaxError","Error","buildMessage","expected","found","hex","ch","charCodeAt","toString","toUpperCase","literalEscape","replace","classEscape","describeExpectation","expectation","text","escapedParts","parts","map","part","isArray","inverted","description","expected1","j","descriptions","sort","slice","join","describeExpected","found1","message","location","_this","name","captureStackTrace","parse","input","options","undefined","peg$result","location1","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$c1","messageText","value","insertLocation","peg$c2","peg$otherExpectation","peg$c3","peg$c4","peg$literalExpectation","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$classExpectation","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","option","peg$c16","peg$c17","stem","peg$c18","tokens","peg$c19","peg$c20","peg$c21","skeleton","peg$c22","style","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","pattern","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","pluralType","offset","reduce","all","_a","id","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","negative","num","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","escapedChar","quotedChars","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","digits","parseInt","peg$c86","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","text1","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","push","peg$parsemessage","s0","s1","peg$parsemessageElement","peg$parsemessageText","peg$parseliteralElement","s2","s3","s5","peg$parse_","peg$parseargNameOrNumber","peg$parseargumentElement","s7","s9","s10","s11","s12","substr","peg$parsenumberSkeletonToken","peg$parsenumberSkeleton","peg$parsenumberArgStyle","peg$parsenumberFormatElement","peg$parsedateTimeSkeletonLiteral","peg$parsedateTimeSkeletonPattern","substring","peg$parsedateTimeSkeleton","peg$parsedateOrTimeArgStyle","peg$parsedateOrTimeFormatElement","peg$parsesimpleFormatElement","s13","s14","s15","peg$parsenumber","peg$parsepluralOption","peg$parsepluralElement","peg$parseselectOption","peg$parseselectElement","peg$parsedoubleApostrophes","peg$parsequotedString","peg$parseunquotedString","peg$parsenumberSkeletonId","s4","peg$parsepatternWhiteSpace","test","charAt","peg$parsenumberSkeletonTokenOption","s6","peg$parseargName","peg$parsepluralRuleSelectValue","peg$parsepatternSyntax","peg$parseargNumber","captureLocation","PLURAL_HASHTAG_REGEX","opts","els","pegParse","normalizeHashtagInPlural","forEach","keys","opt","matchingLiteralElIndex","literalEl","el_1","newValue","newEls","splice","concat","getCacheId","inputs","JSON","stringify","obj","k","orderedProps","domParser","memoizeFormatConstructor","FormatConstructor","cache","args","_i","cacheId","format","bind","ESCAPE_HASH_REGEX","FormatError","msg","variableId","formatToParts","locales","formatters","formats","values","originalMessage","result","els_1","varName","String","getDateTimeFormat","getNumberFormat","other","RangeError","rule","getPluralRules","lastPart","mergeLiteral","formatToString","TOKEN_DELIMITER","TOKEN_REGEX","counter","restoreRichPlaceholderMessage","objectParts","split","filter","Boolean","c","formatXMLMessage","formattedMessage","Date","now","indexOf","DOMParser","dom","parseFromString","getElementsByTagName","innerHTML","content","firstChild","childNodes","reconstructedChunks","tagName","outerHTML","textContent","chunks","formatFnOrValue","mergeConfigs","defaultConfig","configs","c1","c2","mergeConfig","createDefaultFormatters","dateTime","pluralRules","memoizeIntlConstructor","Intl","NumberFormat","DateTimeFormat","PluralRules","IntlMessageFormat","defaultLocale","__parse","currency","percent","short","month","day","year","medium","long","full","weekday","hour","minute","second","timeZoneName","overrideFormats","formatterCache","ast","locale","resolvedOptions","getAst","TypeError","supportedLocalesOf","localeMatcher","e","resolveLocale","prewarmFormatters"],"mappings":"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"}